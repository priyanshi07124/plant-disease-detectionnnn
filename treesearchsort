index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tree-Based Search & Sort</title>
  <link rel="stylesheet" href="style.css"/>
</head>
<body>
  <div class="container">
    <h1>Binary Search Tree - Search and Sort</h1>

    <input type="number" id="inputValue" placeholder="Enter integer">
    <button onclick="insert()">Insert</button>

    <button onclick="inOrderTraversal()">In-Order Sort</button>
    <input type="number" id="searchValue" placeholder="Search integer">
    <button onclick="search()">Search</button>

    <div id="output"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>



style.css
body {
  font-family: Arial, sans-serif;
  background-color: #f0f4f8;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  min-height: 100vh;
  padding: 20px;
}

.container {
  background-color: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  width: 400px;
  text-align: center;
}

input[type="number"] {
  padding: 8px;
  margin: 5px;
  width: 70%;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 8px 10px;
  margin: 5px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

#output {
  margin-top: 20px;
  font-size: 16px;
  color: #333;
}

script.js
// Node class for the Binary Search Tree
class Node {
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

// Binary Search Tree class
class BST {
  constructor() {
    this.root = null;
  }

  insert(data) {
    const newNode = new Node(data);

    if (this.root === null) {
      this.root = newNode;
      return;
    }

    let current = this.root;
    while (true) {
      if (data < current.data) {
        if (current.left === null) {
          current.left = newNode;
          return;
        }
        current = current.left;
      } else {
        if (current.right === null) {
          current.right = newNode;
          return;
        }
        current = current.right;
      }
    }
  }

  inOrderTraversal(node, result = []) {
    if (node !== null) {
      this.inOrderTraversal(node.left, result);
      result.push(node.data);
      this.inOrderTraversal(node.right, result);
    }
    return result;
  }

  search(node, key) {
    if (node === null) return false;
    if (node.data === key) return true;
    if (key < node.data) return this.search(node.left, key);
    return this.search(node.right, key);
  }
}

// Instantiate BST
const bst = new BST();

function insert() {
  const val = parseInt(document.getElementById("inputValue").value);
  if (!isNaN(val)) {
    bst.insert(val);
    document.getElementById("output").innerText = `Inserted: ${val}`;
    document.getElementById("inputValue").value = '';
  } else {
    alert("Please enter a valid integer.");
  }
}

function inOrderTraversal() {
  const sorted = bst.inOrderTraversal(bst.root);
  document.getElementById("output").innerText = `Sorted (In-Order): ${sorted.join(", ")}`;
}

function search() {
  const val = parseInt(document.getElementById("searchValue").value);
  if (!isNaN(val)) {
    const found = bst.search(bst.root, val);
    document.getElementById("output").innerText = found
      ? `Found: ${val}`
      : `Not Found: ${val}`;
    document.getElementById("searchValue").value = '';
  } else {
    alert("Please enter a valid integer to search.");
  }
}
